name: Build Cross-Platform Packages

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_all:
        description: 'Build all installer types'
        required: false
        default: true
        type: boolean
      skip_tests:
        description: 'Skip build system tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  # Validate build system before building
  validate:
    name: Validate Build System
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.validation.outputs.should_build }}

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate build system
      id: validation
      run: |
        if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
          echo "Skipping build system tests"
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          npm run test:build
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi

  # Build for macOS (can build all platforms)
  build-macos:
    name: Build macOS Packages
    runs-on: macos-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup build cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.ELECTRON_CACHE }}
          ${{ env.ELECTRON_BUILDER_CACHE }}
          ~/.npm
          .next/cache
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install dependencies
      run: npm ci

    - name: Build All macOS Packages
      run: npm run dist:mac:all
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        SKIP_NOTARIZATION: true
        ELECTRON_BUILDER_COMPRESSION_LEVEL: 9

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-all-${{ github.sha }}
        path: |
          dist/*.dmg
          dist/*.pkg
          dist/*.zip
          dist/mac/
        retention-days: 30
        if-no-files-found: warn

  # Build for Windows
  build-windows:
    name: Build Windows Packages
    runs-on: windows-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup build cache
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\electron
          ~\AppData\Local\electron-builder
          ~\.npm
          .next\cache
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install dependencies
      run: npm ci

    - name: Build All Windows Packages
      run: npm run dist:win:all
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        WIN_CSC_LINK: ""
        WIN_CSC_KEY_PASSWORD: ""
        ELECTRON_BUILDER_COMPRESSION_LEVEL: 9

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-all-${{ github.sha }}
        path: |
          dist/*.exe
          dist/*.msi
          dist/*.zip
          dist/win-unpacked/
        retention-days: 30
        if-no-files-found: warn

  # Build for Linux
  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup build cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.ELECTRON_CACHE }}
          ${{ env.ELECTRON_BUILDER_CACHE }}
          ~/.npm
          .next/cache
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install system dependencies
      run: |
        sudo apt-get update

    - name: Install dependencies
      run: npm ci

    - name: Build All Linux Packages
      run: npm run dist:linux:all
      env:
        ELECTRON_BUILDER_COMPRESSION_LEVEL: 9

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-all-${{ github.sha }}
        path: |
          dist/*.AppImage
          dist/*.tar.gz
          dist/linux-unpacked/
        retention-days: 30
        if-no-files-found: warn

  # Collect all artifacts and create summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [validate, build-macos, build-windows, build-linux]
    if: always() && needs.validate.outputs.should_build == 'true'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create build summary
      run: |
        echo "# 🎉 DropSentinel Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Build Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check job statuses
        if [ "${{ needs.build-macos.result }}" = "success" ]; then
          echo "✅ **macOS Builds**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **macOS Builds**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.build-windows.result }}" = "success" ]; then
          echo "✅ **Windows Builds**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Windows Builds**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.build-linux.result }}" = "success" ]; then
          echo "✅ **Linux Builds**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Linux Builds**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # List artifacts
        if [ -d "artifacts" ]; then
          find artifacts -type f \( -name "*.dmg" -o -name "*.pkg" -o -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.tar.gz" -o -name "*.zip" \) | while read file; do
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)
            echo "- 📁 **$filename** ($size)" >> $GITHUB_STEP_SUMMARY
          done
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Download Instructions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the **Actions** tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "3. Scroll down to **Artifacts** section" >> $GITHUB_STEP_SUMMARY
        echo "4. Download the desired platform package" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Retention**: Artifacts are kept for 30 days" >> $GITHUB_STEP_SUMMARY