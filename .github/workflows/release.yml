name: Release

on:
  push:
    tags:
      - 'v*'
  repository_dispatch:
    types: [release-build]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: false
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
          - draft

env:
  NODE_VERSION: '20'
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  # Validate before release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      release_type: ${{ steps.version.outputs.release_type }}

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Validate build system
      run: npm run test:build

    - name: Extract version info
      id: version
      run: |
        RELEASE_TYPE="release"

        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'release' }}"
        elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          TAG="${{ github.event.client_payload.tag }}"
          RELEASE_TYPE="${{ github.event.client_payload.release_type || 'release' }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi

        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        echo "Release tag: $TAG"
        echo "Version: $VERSION"
        echo "Release type: $RELEASE_TYPE"

  # Build for macOS with code signing and notarization
  build-macos:
    name: Build macOS Release
    runs-on: macos-latest
    needs: validate

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install macOS build dependencies
      run: |
        echo "üîß Installing macOS build dependencies..."

        # Install create-dmg for better DMG creation (if not already available)
        if ! command -v create-dmg &> /dev/null; then
          echo "Installing create-dmg..."
          brew install create-dmg
        else
          echo "create-dmg already available"
        fi

        # Ensure Xcode command line tools are available
        if ! xcode-select -p &> /dev/null; then
          echo "Installing Xcode command line tools..."
          xcode-select --install || echo "Xcode tools installation initiated"
        else
          echo "Xcode command line tools already available"
        fi

        # Check for required tools
        echo "Checking build tools availability:"
        which hdiutil || echo "‚ö†Ô∏è hdiutil not found"
        which pkgbuild || echo "‚ö†Ô∏è pkgbuild not found"
        which productbuild || echo "‚ö†Ô∏è productbuild not found"

        echo "‚úÖ macOS build dependencies setup complete"

    - name: Setup build cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.ELECTRON_CACHE }}
          ${{ env.ELECTRON_BUILDER_CACHE }}
          ~/.npm
          .next/cache
        key: macOS-release-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          macOS-release-

    - name: Install dependencies
      run: |
        echo "üîß Installing dependencies with enhanced verification..."

        # Clear npm cache to avoid conflicts
        npm cache clean --force

        # Install dependencies
        npm ci --legacy-peer-deps

        # Install pnpm globally for electron-builder compatibility
        npm install -g pnpm

        # Verify Next.js installation
        if ! npx next --version; then
          echo "‚ö†Ô∏è Next.js not found, installing..."
          npm install next styled-jsx
        fi

        # Verify pnpm installation
        if ! npx pnpm --version; then
          echo "‚ö†Ô∏è pnpm not found, reinstalling..."
          npm install -g pnpm
        fi

        echo "‚úÖ Dependencies installed and verified"

    - name: Prepare for app notarization
      if: env.APPLE_API_KEY != ''
      run: |
        mkdir -p ~/private_keys/
        echo '${{ secrets.APPLE_API_KEY }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
      env:
        APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}

    - name: Build macOS release packages
      run: |
        echo "üçé Starting macOS release build..."
        echo "Building comprehensive macOS packages (DMG, PKG, ZIP)..."
        echo "Target: Universal binaries (Intel x64 + Apple Silicon ARM64)"

        # Create logs directory
        mkdir -p logs

        # First try the comprehensive build
        echo "üîÑ Attempting comprehensive macOS build..."
        if npm run dist:mac:all --verbose 2>&1 | tee logs/macos-build.log; then
          echo "‚úÖ Comprehensive macOS build completed successfully"
        else
          echo "‚ùå Comprehensive build failed, trying individual builds..."

          # Try individual builds with detailed logging
          echo "üîÑ Building DMG..." | tee -a logs/macos-build-fallback.log
          if npm run dist:mac:dmg --verbose 2>&1 | tee -a logs/macos-build-fallback.log; then
            echo "‚úÖ DMG build succeeded"
          else
            echo "‚ùå DMG build failed"
          fi

          echo "üîÑ Building PKG..." | tee -a logs/macos-build-fallback.log
          if npm run dist:mac:pkg --verbose 2>&1 | tee -a logs/macos-build-fallback.log; then
            echo "‚úÖ PKG build succeeded"
          else
            echo "‚ùå PKG build failed"
          fi

          echo "üîÑ Building ZIP..." | tee -a logs/macos-build-fallback.log
          if npm run dist:mac:zip --verbose 2>&1 | tee -a logs/macos-build-fallback.log; then
            echo "‚úÖ ZIP build succeeded"
          else
            echo "‚ùå ZIP build failed"
          fi
        fi

        echo "üì¶ macOS Build Results:"
        if [ -d "dist" ]; then
          echo "Contents of dist directory:"
          find dist -type f -exec ls -lh {} \;
          echo ""
          echo "macOS packages found:"
          find dist -type f \( -name "*.dmg" -o -name "*.pkg" -o -name "*.zip" \) -exec ls -lh {} \; || echo "‚ùå No macOS packages found"
        else
          echo "‚ùå No dist directory found"
          exit 1
        fi

        # Verify at least one package was created
        if ! find dist -type f \( -name "*.dmg" -o -name "*.pkg" -o -name "*.zip" \) | grep -q .; then
          echo "‚ùå No macOS packages were created!"
          echo "Build logs:"
          cat logs/macos-build.log || echo "No build log found"
          cat logs/macos-build-fallback.log || echo "No fallback log found"
          exit 1
        fi
      env:
        # macOS code signing and notarization
        APPLE_API_KEY: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        ELECTRON_BUILDER_COMPRESSION_LEVEL: 9

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-release-${{ needs.validate.outputs.version }}
        path: |
          dist/*.dmg
          dist/*.pkg
          dist/*.zip
        retention-days: 90

  # Build for Windows with code signing
  build-windows:
    name: Build Windows Release
    runs-on: windows-latest
    needs: validate

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup build cache
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\electron
          ~\AppData\Local\electron-builder
          ~\.npm
          .next\cache
        key: Windows-release-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          Windows-release-

    - name: Install dependencies
      run: |
        Write-Host "üîß Installing dependencies with enhanced verification..."

        # Clear npm cache to avoid conflicts
        npm cache clean --force

        # Install dependencies
        npm ci --legacy-peer-deps

        # Install pnpm globally for electron-builder compatibility
        npm install -g pnpm

        # Verify Next.js installation
        try {
          npx next --version
          Write-Host "‚úÖ Next.js is available"
        } catch {
          Write-Host "‚ö†Ô∏è Next.js not found, installing..."
          npm install next styled-jsx
        }

        # Verify pnpm installation
        try {
          npx pnpm --version
          Write-Host "‚úÖ pnpm is available"
        } catch {
          Write-Host "‚ö†Ô∏è pnpm not found, reinstalling..."
          npm install -g pnpm
        }

        Write-Host "‚úÖ Dependencies installed and verified"
      shell: pwsh

    - name: Build Windows release packages
      run: |
        Write-Host "ü™ü Starting Windows release build..."
        Write-Host "Building comprehensive Windows packages (NSIS, MSI, Portable, ZIP)..."

        # Run the comprehensive build
        try {
          npm run dist:win:all --verbose
          Write-Host "‚úÖ Comprehensive Windows build completed successfully"
        } catch {
          Write-Host "‚ùå Comprehensive build failed, trying fallback strategy..."

          # Fallback to individual builds
          Write-Host "üîÑ Trying individual package builds..."
          try { npm run dist:win:nsis --verbose } catch { Write-Host "‚ö†Ô∏è NSIS build failed" }
          try { npm run dist:win:msi --verbose } catch { Write-Host "‚ö†Ô∏è MSI build failed" }
          try { npm run dist:win:portable --verbose } catch { Write-Host "‚ö†Ô∏è Portable build failed" }
          try { npm run dist:win:zip --verbose } catch { Write-Host "‚ö†Ô∏è ZIP build failed" }
        }

        Write-Host "üì¶ Windows Build Results:"
        if (Test-Path "dist") {
          Get-ChildItem -Path "dist" -Filter "*.exe" -Recurse | ForEach-Object { Write-Host "$($_.Name) - $([math]::Round($_.Length/1MB, 2)) MB" }
          Get-ChildItem -Path "dist" -Filter "*.msi" -Recurse | ForEach-Object { Write-Host "$($_.Name) - $([math]::Round($_.Length/1MB, 2)) MB" }
          Get-ChildItem -Path "dist" -Filter "*.zip" -Recurse | ForEach-Object { Write-Host "$($_.Name) - $([math]::Round($_.Length/1MB, 2)) MB" }
        } else {
          Write-Host "‚ùå No dist directory found"
          exit 1
        }
      shell: pwsh
      env:
        # Windows code signing
        WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
        WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        ELECTRON_BUILDER_COMPRESSION_LEVEL: 9

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-${{ needs.validate.outputs.version }}
        path: |
          dist/*.exe
          dist/*.msi
          dist/*.zip
        retention-days: 90

  # Build for Linux
  build-linux:
    name: Build Linux Release
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup build cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.ELECTRON_CACHE }}
          ${{ env.ELECTRON_BUILDER_CACHE }}
          ~/.npm
          .next/cache
        key: Linux-release-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          Linux-release-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm

    - name: Install dependencies
      run: |
        echo "üîß Installing dependencies with enhanced verification..."

        # Clear npm cache to avoid conflicts
        npm cache clean --force

        # Install dependencies
        npm ci --legacy-peer-deps

        # Install pnpm globally for electron-builder compatibility
        npm install -g pnpm

        # Verify Next.js installation
        if ! npx next --version; then
          echo "‚ö†Ô∏è Next.js not found, installing..."
          npm install next styled-jsx
        fi

        # Verify pnpm installation
        if ! npx pnpm --version; then
          echo "‚ö†Ô∏è pnpm not found, reinstalling..."
          npm install -g pnpm
        fi

        echo "‚úÖ Dependencies installed and verified"

    - name: Build Linux release packages
      run: |
        echo "üêß Starting Linux release build..."
        echo "Building comprehensive Linux packages (AppImage, DEB, RPM, TAR.GZ, Snap, Flatpak)..."

        # Create logs directory
        mkdir -p logs

        # Run the comprehensive build
        if npm run dist:linux:all --verbose 2>&1 | tee logs/linux-build.log; then
          echo "‚úÖ Comprehensive Linux build completed successfully"
        else
          echo "‚ùå Comprehensive build failed, trying fallback strategy..."

          # Fallback to individual working formats with detailed logging
          echo "üîÑ Building individual working package formats..."
          echo "Building AppImage..." | tee -a logs/linux-build-fallback.log
          npm run dist:linux:appimage --verbose 2>&1 | tee -a logs/linux-build-fallback.log || echo "‚ùå AppImage build failed"

          echo "Building DEB..." | tee -a logs/linux-build-fallback.log
          npm run dist:linux:deb --verbose 2>&1 | tee -a logs/linux-build-fallback.log || echo "‚ùå DEB build failed"

          echo "Building TAR.GZ..." | tee -a logs/linux-build-fallback.log
          npm run dist:linux:tar --verbose 2>&1 | tee -a logs/linux-build-fallback.log || echo "‚ùå TAR build failed"

          echo "Building Snap..." | tee -a logs/linux-build-fallback.log
          npm run dist:linux:snap --verbose 2>&1 | tee -a logs/linux-build-fallback.log || echo "‚ö†Ô∏è Snap build failed (may fail on CI)"
        fi

        echo "üì¶ Linux Build Results:"
        if [ -d "dist" ]; then
          find dist -type f \( -name "*.AppImage" -o -name "*.deb" -o -name "*.tar.gz" -o -name "*.snap" -o -name "*.rpm" -o -name "*.flatpak" \) -exec ls -lh {} \; || echo "No Linux packages found"
        else
          echo "‚ùå No dist directory found"
          exit 1
        fi
      env:
        ELECTRON_BUILDER_COMPRESSION_LEVEL: 9

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-release-${{ needs.validate.outputs.version }}
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.tar.gz
        retention-days: 90

  # Create GitHub release with all artifacts
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-macos, build-windows, build-linux]
    if: always() && needs.validate.result == 'success'

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find release-artifacts -type f \( -name "*.dmg" -o -name "*.pkg" -o -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;

        # Create checksums
        cd release-assets
        sha256sum * > checksums.txt
        cd ..

        # List all files
        echo "Release assets:"
        ls -la release-assets/

    - name: Generate release notes
      run: |
        cat > release-notes.md << 'EOF'
        # DropSentinel ${{ needs.validate.outputs.tag }}

        ## üéâ What's New

        Advanced file security scanner with real-time protection and comprehensive threat detection.

        ## üì¶ Downloads

        ### Windows
        - **NSIS Installer** (`.exe`) - Recommended for most users
        - **MSI Installer** (`.msi`) - For enterprise environments
        - **Portable** (`.exe`) - No installation required

        ### macOS
        - **DMG** (`.dmg`) - Standard macOS installer
        - **PKG** (`.pkg`) - Alternative installer format
        - **ZIP** (`.zip`) - Compressed application bundle

        ### Linux
        - **AppImage** (`.AppImage`) - Universal Linux format
        - **DEB** (`.deb`) - For Debian/Ubuntu systems
        - **RPM** (`.rpm`) - For Red Hat/Fedora systems
        - **TAR.GZ** (`.tar.gz`) - Compressed archive

        ## üîê Security

        All packages are built with maximum compression and security features:
        - Code signing (when certificates are available)
        - Hardened runtime (macOS)
        - Proper entitlements and permissions
        - Integrity checksums included

        ## üìã System Requirements

        - **Windows**: Windows 10 or later (x64)
        - **macOS**: macOS 10.15 (Catalina) or later (Intel/Apple Silicon)
        - **Linux**: Modern Linux distribution (x64)

        ## üöÄ Installation

        1. Download the appropriate package for your platform
        2. Verify the checksum (optional but recommended)
        3. Install using your platform's standard method
        4. Launch DropSentinel and configure your VirusTotal API key

        ## üìû Support

        - [GitHub Issues](https://github.com/JSB2010/DropSentinel/issues)
        - [Documentation](https://github.com/JSB2010/DropSentinel/blob/main/README.md)
        - [Build Documentation](https://github.com/JSB2010/DropSentinel/blob/main/BUILD.md)
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.tag }}
        name: DropSentinel ${{ needs.validate.outputs.tag }}
        body_path: release-notes.md
        files: release-assets/*
        draft: ${{ needs.validate.outputs.release_type == 'draft' }}
        prerelease: ${{ needs.validate.outputs.release_type == 'prerelease' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Trigger release analytics
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GH_TOKEN }}
        event-type: release-analytics
        client-payload: |
          {
            "version": "${{ needs.validate.outputs.version }}",
            "tag": "${{ needs.validate.outputs.tag }}",
            "prerelease": false
          }

    - name: Update download links
      run: |
        echo "üîÑ Updating website download links for version ${{ needs.validate.outputs.version }}..."

        # Install Node.js dependencies if needed
        if [ ! -d "node_modules" ]; then
          npm ci --legacy-peer-deps
        fi

        # Update download links to match new version
        npm run update-download-links

        # Check if there are changes to commit
        if ! git diff --quiet; then
          echo "üìù Committing updated download links..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app/website/download/page.tsx app/website/page.tsx
          git commit -m "chore: Update download links for release ${{ needs.validate.outputs.tag }}" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
        else
          echo "‚úÖ Download links are already up to date"
        fi

    - name: Update package registry
      run: |
        echo "## üéâ Release Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL**: https://github.com/JSB2010/DropSentinel/releases/tag/${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Available Downloads" >> $GITHUB_STEP_SUMMARY
        echo "- ü™ü **Windows**: NSIS Installer, MSI Package, Portable EXE, ZIP Archive" >> $GITHUB_STEP_SUMMARY
        echo "- üçé **macOS**: DMG Disk Image, PKG Installer, ZIP Archive" >> $GITHUB_STEP_SUMMARY
        echo "- üêß **Linux**: AppImage, TAR.GZ Archive, DEB Package, RPM Package" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Packages will be published to GitHub Packages automatically" >> $GITHUB_STEP_SUMMARY
        echo "- Website download links have been updated automatically" >> $GITHUB_STEP_SUMMARY
        echo "- Container images will be available in GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
        echo "- Update documentation and announce the release" >> $GITHUB_STEP_SUMMARY